/*

   FiniteID.icc

   Copyright (c) 2015 Daniel Markus

   This file is part of the Unimock library that is distributed under the
   University of Illinois/NCSA Open Source License (NCSA). See accompanying
   file LICENSE.TXT for details.

________________________________________________________________________________
*/

#include <limits>
#include <cassert>


namespace unimock
{

namespace
{
constexpr const std::uint64_t UNINITIALIZED = 0;

} // unnamed namespace


inline FiniteID::FiniteID() noexcept
:
   integerID_( UNINITIALIZED )
{
}

inline FiniteID::FiniteID( FiniteID&& other ) noexcept
:
   integerID_( other.integerID_ )
{
   other.integerID_ = UNINITIALIZED;
}

inline FiniteID& FiniteID::operator=( FiniteID&& other ) noexcept
{
   integerID_ = other.integerID_;
   other.integerID_ = UNINITIALIZED;

   return *this;
}

inline FiniteID FiniteID::generate() noexcept
{
   // Using static variables in inlined methods is safe. See
   // http://stackoverflow.com/questions/185624
   // http://stackoverflow.com/questions/19373061
   static std::uint64_t nextID = 1;

   // We can only create a limited number of IDs, hence FiniteID.
   assert( nextID < std::numeric_limits<std::uint64_t>::max() );

   FiniteID finiteID;
   finiteID.integerID_ = nextID;
   nextID++;

   return finiteID;
}

inline FiniteID::operator bool() const noexcept
{
   return integerID_ != UNINITIALIZED;
}

inline bool FiniteID::operator==( const FiniteID& other ) const noexcept
{
   return integerID_ == other.integerID_;
}

inline bool FiniteID::operator!=( const FiniteID& other ) const noexcept
{
   return integerID_ != other.integerID_;
}


} // namespace

